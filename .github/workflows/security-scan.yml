name: Security Analysis

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly security scans on published images
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:  # Allow manual triggers
    inputs:
      scan_published_image:
        description: 'Scan published Docker image from Docker Hub'
        required: false
        default: false
        type: boolean
      image_tag:
        description: 'Docker image tag to scan (if scanning published image)'
        required: false
        default: 'latest'
        type: string

permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: gitchangesanalyzer

jobs:
  docker-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine scan target
      id: scan-target
      run: |
        if [ "${{ github.event.inputs.scan_published_image }}" == "true" ]; then
          # Scan published image from Docker Hub
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            TAG="${{ github.event.inputs.image_tag || 'latest' }}"
            IMAGE_REF="${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${TAG}"
            echo "scan_mode=published" >> $GITHUB_OUTPUT
            echo "image_ref=${IMAGE_REF}" >> $GITHUB_OUTPUT
            echo "üîç Scanning published image: ${IMAGE_REF}"          else
            echo "‚ùå Cannot scan published image: DOCKERHUB_USERNAME not configured"
            exit 1
          fi
        else
          # Build and scan local image
          echo "scan_mode=local" >> $GITHUB_OUTPUT
          echo "image_ref=${{ env.IMAGE_NAME }}:scan" >> $GITHUB_OUTPUT
          echo "üî® Building and scanning local image"
        fi
    
    - name: Set up Docker Buildx
      if: steps.scan-target.outputs.scan_mode == 'local'
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for scanning
      if: steps.scan-target.outputs.scan_mode == 'local'
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: ${{ steps.scan-target.outputs.image_ref }}
        target: final
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ steps.scan-target.outputs.image_ref }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # Don't fail on vulnerabilities
        timeout: '10m'  # Add timeout for large images
    
    - name: Run Trivy vulnerability scanner (Table format)
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ steps.scan-target.outputs.image_ref }}
        format: 'table'
        severity: 'CRITICAL,HIGH'
    
    - name: Show scan summary
      if: always()
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "üîç Security scan completed successfully"
          echo "üìÑ SARIF report generated: trivy-results.sarif"
          
          # Show file size
          SIZE=$(stat -c%s trivy-results.sarif 2>/dev/null || echo "unknown")
          echo "üìè Report size: $SIZE bytes"
          
          # Try to extract vulnerability count if jq is available
          if command -v jq >/dev/null 2>&1 && [ -s "trivy-results.sarif" ]; then
            TOTAL_RESULTS=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
            echo "üö® Total security findings: $TOTAL_RESULTS"
            
            # Count by severity if possible
            CRITICAL=$(jq '[.runs[0].results[] | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            HIGH=$(jq '[.runs[0].results[] | select(.level == "warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            echo "üî¥ Critical: $CRITICAL"
            echo "üü† High: $HIGH"
          fi
        else
          echo "‚ùå No SARIF report generated"
        fi
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'docker-image'
    
    - name: Upload security scan artifact
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        name: security-scan-results-${{ github.run_number }}
        path: |
          trivy-results.sarif
        retention-days: 30
    
    - name: Comment on PR with scan results
      if: github.event_name == 'pull_request' && hashFiles('trivy-results.sarif') != ''
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const sarif = JSON.parse(fs.readFileSync('trivy-results.sarif', 'utf8'));
            const results = sarif.runs[0].results || [];
            const critical = results.filter(r => r.level === 'error').length;
            const high = results.filter(r => r.level === 'warning').length;
            
            const comment = `## üîí Security Scan Results
            
            Docker image security scan completed:
            - üî¥ Critical vulnerabilities: **${critical}**
            - üü† High vulnerabilities: **${high}**
            - üìä Total findings: **${results.length}**
            
            ${results.length > 0 ? '‚ö†Ô∏è Please review the security findings before merging.' : '‚úÖ No security vulnerabilities detected!'}
            
            View detailed results in the [Security tab](${context.payload.repository.html_url}/security) or download the artifact from this workflow run.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not parse SARIF or comment on PR:', error.message);
          }

  code-security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-and-quality
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build for CodeQL analysis
      run: dotnet build --no-restore --configuration Release
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"
    
    - name: Upload CodeQL results
      if: always()
      continue-on-error: true
      run: |
        echo "‚úÖ CodeQL analysis completed"
        echo "üîç Results will appear in the Security tab under Code scanning alerts"